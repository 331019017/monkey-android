apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'build-time-tracker'
apply plugin: 'bugly'

apply from: '../config/quality/quality.gradle'

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

//bugly
bugly {
    appId = BUGLY_APPID
    appKey = BUGLY_APPKEY
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.yeungeek.monkeyandroid"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk

        // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds. E.g 1.3.72 == 1,003,072
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)

        buildConfigField "String", "BUGLY_APPID", "\"${BUGLY_APPID}\""

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86'//, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    signingConfigs {
        // You must set up an environment var before release signing
        release {
            storeFile file("${monkeyAppKeystoreReleaseLocation}")
            keyAlias "${monkeyAppReleaseKeyAlias}"
            storePassword "${monkeyAppReleaseStorePassword}"
            keyPassword "${monkeyAppReleaseKeyPassword}"
        }

        debug {
            storeFile file("${monkeyAppKeystoreDebugLocation}")
            keyAlias "${monkeyAppDebugKeyAlias}"
            storePassword "${monkeyAppDebugStorePassword}"
            keyPassword "${monkeyAppDebugKeyPassword}"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaSourceCompatibility
        targetCompatibility rootProject.ext.javaTargetCompatibility
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    def supportDependencies = rootProject.ext.supportDependencies
    def injectDependencies = rootProject.ext.injectDependencies
    def httpDependencies = rootProject.ext.httpDependencies
    def rxDependencies = rootProject.ext.rxDependencies
    def utilDependencies = rootProject.ext.utilDependencies
    def analysisDependencies = rootProject.ext.analysisDependencies

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':mvp')

    //support
    compile supportDependencies.appcompat
    compile supportDependencies.design
    compile supportDependencies.recyclerview
    compile supportDependencies.cardView

    // rx
    compile rxDependencies.rxjava
    compile rxDependencies.rxandroid
//    compile rxDependencies.rxPreferences

    // inject
    compile injectDependencies.butterknife
    // dagger2
    compile injectDependencies.dagger
    apt injectDependencies.daggerCompiler
    compile injectDependencies.javaxAnnotation

    compile httpDependencies.retrofit
    compile httpDependencies.converterGson
    compile httpDependencies.adapterRxjava

    compile httpDependencies.glide
    compile httpDependencies.glideOkHttp

    compile httpDependencies.okhttp
    compile httpDependencies.loggingInterceptor

    compile utilDependencies.sqlbrite
    compile utilDependencies.stetho
    // log
    compile utilDependencies.timber

    //widget
    compile uiWidgetDependencies.circleImageView
    compile uiWidgetDependencies.ultraPtr
    compile uiWidgetDependencies.aboutit
    compile uiWidgetDependencies.aboutitMeta
    compile uiWidgetDependencies.awesomeSplash
    compile uiWidgetDependencies.markdownj

    //analysis
    compile analysisDependencies.bugly

    // Test
    testCompile injectDependencies.dagger
    testCompile injectDependencies.javaxAnnotation
    testCompile domainTestDependencies.junit

    testApt injectDependencies.daggerCompiler
}
